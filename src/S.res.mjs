// Generated by ReScript, PLEASE EDIT WITH CARE

import * as S_Core$RescriptSchema from "./S_Core.res.mjs";

let Path = S_Core$RescriptSchema.Path;

let Raised = S_Core$RescriptSchema.Raised;

let Flag = S_Core$RescriptSchema.Flag;

let $$Error = S_Core$RescriptSchema.$$Error;

let Literal = S_Core$RescriptSchema.Literal;

let never = S_Core$RescriptSchema.never;

let unknown = S_Core$RescriptSchema.unknown;

let unit = S_Core$RescriptSchema.unit;

let string = S_Core$RescriptSchema.string;

let bool = S_Core$RescriptSchema.bool;

let int = S_Core$RescriptSchema.int;

let float = S_Core$RescriptSchema.float;

let bigint = S_Core$RescriptSchema.bigint;

let json = S_Core$RescriptSchema.json;

let literal = S_Core$RescriptSchema.literal;

let array = S_Core$RescriptSchema.array;

let unnest = S_Core$RescriptSchema.unnest;

let list = S_Core$RescriptSchema.list;

let dict = S_Core$RescriptSchema.dict;

let option = S_Core$RescriptSchema.option;

let $$null = S_Core$RescriptSchema.$$null;

let nullable = S_Core$RescriptSchema.nullable;

let jsonString = S_Core$RescriptSchema.jsonString;

let union = S_Core$RescriptSchema.union;

let $$enum = S_Core$RescriptSchema.$$enum;

let Catch = S_Core$RescriptSchema.Catch;

let $$catch = S_Core$RescriptSchema.$$catch;

let describe = S_Core$RescriptSchema.describe;

let description = S_Core$RescriptSchema.description;

let deprecate = S_Core$RescriptSchema.deprecate;

let deprecation = S_Core$RescriptSchema.deprecation;

let transform = S_Core$RescriptSchema.transform;

let preprocess = S_Core$RescriptSchema.preprocess;

let custom = S_Core$RescriptSchema.custom;

let refine = S_Core$RescriptSchema.refine;

let to = S_Core$RescriptSchema.to;

let shape = S_Core$RescriptSchema.shape;

let coerce = S_Core$RescriptSchema.coerce;

let compile = S_Core$RescriptSchema.compile;

let parseOrThrow = S_Core$RescriptSchema.parseOrThrow;

let parseJsonOrThrow = S_Core$RescriptSchema.parseJsonOrThrow;

let parseJsonStringOrThrow = S_Core$RescriptSchema.parseJsonStringOrThrow;

let parseAsyncOrThrow = S_Core$RescriptSchema.parseAsyncOrThrow;

let convertOrThrow = S_Core$RescriptSchema.convertOrThrow;

let convertToJsonOrThrow = S_Core$RescriptSchema.convertToJsonOrThrow;

let convertToJsonStringOrThrow = S_Core$RescriptSchema.convertToJsonStringOrThrow;

let convertAsyncOrThrow = S_Core$RescriptSchema.convertAsyncOrThrow;

let reverseConvertOrThrow = S_Core$RescriptSchema.reverseConvertOrThrow;

let reverseConvertToJsonOrThrow = S_Core$RescriptSchema.reverseConvertToJsonOrThrow;

let reverseConvertToJsonStringOrThrow = S_Core$RescriptSchema.reverseConvertToJsonStringOrThrow;

let assertOrThrow = S_Core$RescriptSchema.assertOrThrow;

let isAsync = S_Core$RescriptSchema.isAsync;

let recursive = S_Core$RescriptSchema.recursive;

let setName = S_Core$RescriptSchema.setName;

let removeTypeValidation = S_Core$RescriptSchema.removeTypeValidation;

let Schema = S_Core$RescriptSchema.Schema;

let schema = S_Core$RescriptSchema.schema;

let $$Object = S_Core$RescriptSchema.$$Object;

let object = S_Core$RescriptSchema.object;

let strip = S_Core$RescriptSchema.strip;

let deepStrip = S_Core$RescriptSchema.deepStrip;

let strict = S_Core$RescriptSchema.strict;

let deepStrict = S_Core$RescriptSchema.deepStrict;

let Tuple = S_Core$RescriptSchema.Tuple;

let tuple = S_Core$RescriptSchema.tuple;

let tuple1 = S_Core$RescriptSchema.tuple1;

let tuple2 = S_Core$RescriptSchema.tuple2;

let tuple3 = S_Core$RescriptSchema.tuple3;

let Option = S_Core$RescriptSchema.Option;

let $$String = S_Core$RescriptSchema.$$String;

let Int = S_Core$RescriptSchema.Int;

let Float = S_Core$RescriptSchema.Float;

let $$Array = S_Core$RescriptSchema.$$Array;

let Metadata = S_Core$RescriptSchema.Metadata;

let inline = S_Core$RescriptSchema.inline;

let reverse = S_Core$RescriptSchema.reverse;

let intMin = S_Core$RescriptSchema.intMin;

let intMax = S_Core$RescriptSchema.intMax;

let port = S_Core$RescriptSchema.port;

let floatMin = S_Core$RescriptSchema.floatMin;

let floatMax = S_Core$RescriptSchema.floatMax;

let arrayMinLength = S_Core$RescriptSchema.arrayMinLength;

let arrayMaxLength = S_Core$RescriptSchema.arrayMaxLength;

let arrayLength = S_Core$RescriptSchema.arrayLength;

let stringMinLength = S_Core$RescriptSchema.stringMinLength;

let stringMaxLength = S_Core$RescriptSchema.stringMaxLength;

let stringLength = S_Core$RescriptSchema.stringLength;

let email = S_Core$RescriptSchema.email;

let uuid = S_Core$RescriptSchema.uuid;

let cuid = S_Core$RescriptSchema.cuid;

let url = S_Core$RescriptSchema.url;

let pattern = S_Core$RescriptSchema.pattern;

let datetime = S_Core$RescriptSchema.datetime;

let trim = S_Core$RescriptSchema.trim;

let setGlobalConfig = S_Core$RescriptSchema.setGlobalConfig;

export {
  Path,
  Raised,
  Flag,
  $$Error,
  Literal,
  never,
  unknown,
  unit,
  string,
  bool,
  int,
  float,
  bigint,
  json,
  literal,
  array,
  unnest,
  list,
  dict,
  option,
  $$null,
  nullable,
  jsonString,
  union,
  $$enum,
  Catch,
  $$catch,
  describe,
  description,
  deprecate,
  deprecation,
  transform,
  preprocess,
  custom,
  refine,
  to,
  shape,
  coerce,
  compile,
  parseOrThrow,
  parseJsonOrThrow,
  parseJsonStringOrThrow,
  parseAsyncOrThrow,
  convertOrThrow,
  convertToJsonOrThrow,
  convertToJsonStringOrThrow,
  convertAsyncOrThrow,
  reverseConvertOrThrow,
  reverseConvertToJsonOrThrow,
  reverseConvertToJsonStringOrThrow,
  assertOrThrow,
  isAsync,
  recursive,
  setName,
  removeTypeValidation,
  Schema,
  schema,
  $$Object,
  object,
  strip,
  deepStrip,
  strict,
  deepStrict,
  Tuple,
  tuple,
  tuple1,
  tuple2,
  tuple3,
  Option,
  $$String,
  Int,
  Float,
  $$Array,
  Metadata,
  inline,
  reverse,
  intMin,
  intMax,
  port,
  floatMin,
  floatMax,
  arrayMinLength,
  arrayMaxLength,
  arrayLength,
  stringMinLength,
  stringMaxLength,
  stringLength,
  email,
  uuid,
  cuid,
  url,
  pattern,
  datetime,
  trim,
  setGlobalConfig,
}
/* S_Core-RescriptSchema Not a pure module */
