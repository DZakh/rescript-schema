// Generated by ReScript, PLEASE EDIT WITH CARE

import * as U from "../utils/U.res.mjs";
import Ava from "ava";
import * as S$RescriptSchema from "rescript-schema/src/S.res.mjs";

Ava("Creates schema with the name schema from t type", t => U.assertEqualSchemas(t, S$RescriptSchema.string, S$RescriptSchema.string, undefined));

Ava("Creates schema with the type name and schema at the for non t types", t => U.assertEqualSchemas(t, S$RescriptSchema.int, S$RescriptSchema.int, undefined));

let reusedTypesSchema = S$RescriptSchema.schema(s => [
  s.m(S$RescriptSchema.string),
  s.m(S$RescriptSchema.int),
  s.m(S$RescriptSchema.bool),
  s.m(S$RescriptSchema.float)
]);

Ava("Can reuse schemas from other types", t => U.assertEqualSchemas(t, reusedTypesSchema, S$RescriptSchema.tuple(s => [
  s.item(0, S$RescriptSchema.string),
  s.item(1, S$RescriptSchema.int),
  s.item(2, S$RescriptSchema.bool),
  s.item(3, S$RescriptSchema.float)
]), undefined));

let stringWithDefaultSchema = S$RescriptSchema.Option.getOr(S$RescriptSchema.option(S$RescriptSchema.string), "Foo");

Ava("Creates schema with default", t => U.assertEqualSchemas(t, stringWithDefaultSchema, S$RescriptSchema.Option.getOr(S$RescriptSchema.option(S$RescriptSchema.string), "Foo"), undefined));

let stringWithDefaultAndMatchesSchema = S$RescriptSchema.Option.getOr(S$RescriptSchema.option(S$RescriptSchema.url(S$RescriptSchema.string, undefined)), "Foo");

Ava("Creates schema with default using @s.matches", t => U.assertEqualSchemas(t, stringWithDefaultAndMatchesSchema, S$RescriptSchema.Option.getOr(S$RescriptSchema.option(S$RescriptSchema.url(S$RescriptSchema.string, undefined)), "Foo"), undefined));

let stringWithDefaultNullAndMatchesSchema = S$RescriptSchema.Option.getOr(S$RescriptSchema.$$null(S$RescriptSchema.url(S$RescriptSchema.string, undefined)), "Foo");

Ava("Creates schema with default null using @s.matches", t => U.assertEqualSchemas(t, stringWithDefaultNullAndMatchesSchema, S$RescriptSchema.Option.getOr(S$RescriptSchema.$$null(S$RescriptSchema.url(S$RescriptSchema.string, undefined)), "Foo"), undefined));

let ignoredNullWithMatchesSchema = S$RescriptSchema.option(S$RescriptSchema.string);

Ava("@s.null doesn't override @s.matches(S.option(_))", t => U.assertEqualSchemas(t, ignoredNullWithMatchesSchema, S$RescriptSchema.option(S$RescriptSchema.string), undefined));

let schema = S$RescriptSchema.string;

let fooSchema = S$RescriptSchema.int;

export {
  schema,
  fooSchema,
  reusedTypesSchema,
}
/*  Not a pure module */
