// Generated by ReScript, PLEASE EDIT WITH CARE

import * as U from "../utils/U.res.mjs";
import Ava from "ava";
import * as S$RescriptSchema from "rescript-schema/src/S.res.mjs";

Ava("String schema", t => U.assertEqualSchemas(t, S$RescriptSchema.string, S$RescriptSchema.string, undefined));

Ava("Int schema", t => U.assertEqualSchemas(t, S$RescriptSchema.int, S$RescriptSchema.int, undefined));

Ava("Float schema", t => U.assertEqualSchemas(t, S$RescriptSchema.float, S$RescriptSchema.float, undefined));

Ava("Bool schema", t => U.assertEqualSchemas(t, S$RescriptSchema.bool, S$RescriptSchema.bool, undefined));

Ava("Unit schema", t => U.assertEqualSchemas(t, S$RescriptSchema.unit, S$RescriptSchema.unit, undefined));

Ava("Unknown schema", t => U.assertEqualSchemas(t, S$RescriptSchema.unknown, S$RescriptSchema.unknown, undefined));

Ava("Never schema", t => U.assertEqualSchemas(t, S$RescriptSchema.never, S$RescriptSchema.never, undefined));

let myOptionOfStringSchema = S$RescriptSchema.option(S$RescriptSchema.string);

Ava("Option of string schema", t => U.assertEqualSchemas(t, myOptionOfStringSchema, S$RescriptSchema.option(S$RescriptSchema.string), undefined));

let myArrayOfStringSchema = S$RescriptSchema.array(S$RescriptSchema.string);

Ava("Array of string schema", t => U.assertEqualSchemas(t, myArrayOfStringSchema, S$RescriptSchema.array(S$RescriptSchema.string), undefined));

let myListOfStringSchema = S$RescriptSchema.list(S$RescriptSchema.string);

Ava("List of string schema", t => U.assertEqualSchemas(t, myListOfStringSchema, S$RescriptSchema.list(S$RescriptSchema.string), undefined));

let myDictOfStringSchema = S$RescriptSchema.dict(S$RescriptSchema.string);

Ava("Dict of string schema", t => U.assertEqualSchemas(t, myDictOfStringSchema, S$RescriptSchema.dict(S$RescriptSchema.string), undefined));

let myDictOfStringFromJsSchema = S$RescriptSchema.dict(S$RescriptSchema.string);

Ava("Dict of string schema from Js", t => U.assertEqualSchemas(t, myDictOfStringSchema, S$RescriptSchema.dict(S$RescriptSchema.string), undefined));

let myDictOfStringFromCoreSchema = S$RescriptSchema.dict(S$RescriptSchema.string);

Ava("Dict of string schema from Core", t => U.assertEqualSchemas(t, myDictOfStringFromCoreSchema, S$RescriptSchema.dict(S$RescriptSchema.string), undefined));

let myJsonSchema = S$RescriptSchema.json(true);

Ava("Json schema", t => U.assertEqualSchemas(t, myJsonSchema, S$RescriptSchema.json(true), undefined));

let myJsonFromCoreSchema = S$RescriptSchema.json(true);

Ava("Json schema from Core", t => U.assertEqualSchemas(t, myJsonFromCoreSchema, S$RescriptSchema.json(true), undefined));

let myTupleSchema = S$RescriptSchema.schema(s => [
  s.m(S$RescriptSchema.string),
  s.m(S$RescriptSchema.int)
]);

Ava("Tuple schema", t => U.assertEqualSchemas(t, myTupleSchema, S$RescriptSchema.tuple2(S$RescriptSchema.string, S$RescriptSchema.int), undefined));

let myBigTupleSchema = S$RescriptSchema.schema(s => [
  s.m(S$RescriptSchema.string),
  s.m(S$RescriptSchema.string),
  s.m(S$RescriptSchema.string),
  s.m(S$RescriptSchema.int),
  s.m(S$RescriptSchema.int),
  s.m(S$RescriptSchema.int),
  s.m(S$RescriptSchema.float),
  s.m(S$RescriptSchema.float),
  s.m(S$RescriptSchema.float),
  s.m(S$RescriptSchema.bool),
  s.m(S$RescriptSchema.bool),
  s.m(S$RescriptSchema.bool)
]);

Ava("Big tuple schema", t => U.assertEqualSchemas(t, myBigTupleSchema, S$RescriptSchema.tuple(s => [
  s.item(0, S$RescriptSchema.string),
  s.item(1, S$RescriptSchema.string),
  s.item(2, S$RescriptSchema.string),
  s.item(3, S$RescriptSchema.int),
  s.item(4, S$RescriptSchema.int),
  s.item(5, S$RescriptSchema.int),
  s.item(6, S$RescriptSchema.float),
  s.item(7, S$RescriptSchema.float),
  s.item(8, S$RescriptSchema.float),
  s.item(9, S$RescriptSchema.bool),
  s.item(10, S$RescriptSchema.bool),
  s.item(11, S$RescriptSchema.bool)
]), undefined));

let myCustomStringSchema = S$RescriptSchema.email(S$RescriptSchema.string, undefined);

Ava("Custom string schema", t => U.assertEqualSchemas(t, myCustomStringSchema, S$RescriptSchema.email(S$RescriptSchema.string, undefined), undefined));

let myCustomLiteralStringSchema = S$RescriptSchema.email(S$RescriptSchema.literal("123"), undefined);

Ava("Custom litaral string schema", t => U.assertEqualSchemas(t, myCustomLiteralStringSchema, S$RescriptSchema.email(S$RescriptSchema.literal("123"), undefined), undefined));

let myCustomOptionalStringSchema = S$RescriptSchema.option(S$RescriptSchema.email(S$RescriptSchema.string, undefined));

Ava("Custom optional string schema", t => U.assertEqualSchemas(t, myCustomOptionalStringSchema, S$RescriptSchema.option(S$RescriptSchema.email(S$RescriptSchema.string, undefined)), undefined));

let myNullOfStringSchema = S$RescriptSchema.$$null(S$RescriptSchema.string);

Ava("Null of string schema", t => U.assertEqualSchemas(t, myNullOfStringSchema, S$RescriptSchema.$$null(S$RescriptSchema.string), undefined));

let myStringSchema = S$RescriptSchema.string;

let myIntSchema = S$RescriptSchema.int;

let myFloatSchema = S$RescriptSchema.float;

let myBoolSchema = S$RescriptSchema.bool;

let myUnitSchema = S$RescriptSchema.unit;

let myUnknownSchema = S$RescriptSchema.unknown;

let myNeverSchema = S$RescriptSchema.never;

export {
  myStringSchema,
  myIntSchema,
  myFloatSchema,
  myBoolSchema,
  myUnitSchema,
  myUnknownSchema,
  myNeverSchema,
  myOptionOfStringSchema,
  myArrayOfStringSchema,
  myListOfStringSchema,
  myDictOfStringSchema,
  myDictOfStringFromJsSchema,
  myDictOfStringFromCoreSchema,
  myJsonSchema,
  myJsonFromCoreSchema,
  myTupleSchema,
  myBigTupleSchema,
  myCustomStringSchema,
  myCustomLiteralStringSchema,
  myCustomOptionalStringSchema,
  myNullOfStringSchema,
}
/*  Not a pure module */
